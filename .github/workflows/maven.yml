#name: SCM Project CI/CD Actions
#
#on:
#  push:
#    branches:
#      - master
#      - dev
#      - homol
#      - 'sprint/**'
#      - 'feat/**'
#  pull_request:
#    branches:
#      - master
#      - dev
#      - homol
#      - 'sprint/**'
#      - 'feat/**'
#  workflow_dispatch:
#    inputs:
#      skip_tests:
#        description: 'Skip running test cases?'
#        required: true
#        default: 'false'
#        type: choice
#        options:
#          - 'true'
#          - 'false'
#      skip_sonar:
#        description: 'Skip Sonar analysis?'
#        required: true
#        default: 'false'
#        type: choice
#        options:
#          - 'true'
#          - 'false'
#
#permissions:
#  contents: read
#  security-events: write
#
#jobs:
#  # ðŸ§ª Stage 1: Build and Deploy to Staging (DEV / HOMOL / FEATURE)
#  staging:
#    runs-on: ubuntu-latest
#    if: |
#      github.ref == 'refs/heads/dev' ||
#      github.ref == 'refs/heads/homol' ||
#      startsWith(github.ref, 'refs/heads/feat/') ||
#      startsWith(github.ref, 'refs/heads/sprint/')
#
#    services:
#      mysql:
#        image: mysql:8
#        env:
#          MYSQL_ROOT_PASSWORD: root
#          MYSQL_DATABASE: SCM
#        ports:
#          - 3306:3306
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Wait for MySQL
#        run: |
#          echo "Waiting for MySQL..."
#          for i in {1..10}; do
#            nc -z localhost 3306 && echo "MySQL ready" && exit 0
#            sleep 5
#          done
#          exit 1
#
#      # âœ… Conditional test execution
#      - name: Run tests
#        if: ${{ github.event.inputs.skip_tests != 'true' }}
#        run: mvn clean verify -Dspring.profiles.active=dev
#
#      - name: Skip tests
#        if: ${{ github.event.inputs.skip_tests == 'true' }}
#        run: echo "Skipping tests as selected in workflow_dispatch."
#
#      # âœ… Conditional Sonar execution
#      - name: SonarCloud Scan
#        if: ${{ github.event.inputs.skip_sonar != 'true' }}
#        run: |
#          mvn sonar:sonar \
#            -Dsonar.projectKey=arjunrathod1996_SCMProject \
#            -Dsonar.organization=arjunrathod1996 \
#            -Dsonar.host.url=https://sonarcloud.io \
#            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#
#      - name: Skip Sonar
#        if: ${{ github.event.inputs.skip_sonar == 'true' }}
#        run: echo "Skipping Sonar analysis as selected in workflow_dispatch."
#
#      - name: Build & push Docker image (staging)
#        uses: mr-smithers-excellent/docker-build-push@v6
#        with:
#          image: arjunrathod1996/scmproject-githubactions
#          tags: staging
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Deploy to Staging
#        run: |
#          echo "Deploying to Staging environment..."
#          kubectl apply -f k8s/deployment-staging.yaml
#          kubectl apply -f k8s/service.yaml
#
#  # ðŸš€ Stage 2: Deploy to Production (MASTER)
#  production:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/master'
#    needs: staging
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Build & push Docker image (prod)
#        uses: mr-smithers-excellent/docker-build-push@v6
#        with:
#          image: arjunrathod1996/scmproject-githubactions
#          tags: latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Deploy to Production
#        run: |
#          echo "Deploying to Production (master branch)..."
#          kubectl apply -f k8s/deployment-prod.yaml
#          kubectl apply -f k8s/service.yaml


name: SCM Project CI/CD Actions

on:
  push:
    branches:
      - master
      - dev
      - homol
      - 'sprint/**'
      - 'feat/**'
  pull_request:
    branches:
      - master
      - dev
      - homol
      - 'sprint/**'
      - 'feat/**'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip running test cases?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      skip_sonar:
        description: 'Skip Sonar analysis?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      skip_all:
        description: 'Skip both tests and Sonar?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  security-events: write

jobs:
  # ðŸ§ª Stage 1: Build and Deploy to Staging (DEV / HOMOL / FEATURE)
  staging:
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/dev' ||
      github.ref == 'refs/heads/homol' ||
      startsWith(github.ref, 'refs/heads/feat/') ||
      startsWith(github.ref, 'refs/heads/sprint/')

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: SCM
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          for i in {1..10}; do
            nc -z localhost 3306 && echo "MySQL ready" && exit 0
            sleep 5
          done
          exit 1

      # âœ… Conditional Test Execution
      - name: Run Tests
        if: ${{ github.event.inputs.skip_tests != 'true' && github.event.inputs.skip_all != 'true' }}
        run: mvn clean verify -Dspring.profiles.active=dev

      - name: Skip Tests
        if: ${{ github.event.inputs.skip_tests == 'true' || github.event.inputs.skip_all == 'true' }}
        run: echo "âœ… Skipping tests as selected in workflow_dispatch."

      # âœ… Conditional Sonar Execution
      - name: SonarCloud Scan
        if: ${{ github.event.inputs.skip_sonar != 'true' && github.event.inputs.skip_all != 'true' }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=arjunrathod1996_SCMProject \
            -Dsonar.organization=arjunrathod1996 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Skip Sonar
        if: ${{ github.event.inputs.skip_sonar == 'true' || github.event.inputs.skip_all == 'true' }}
        run: echo "âœ… Skipping Sonar analysis as selected in workflow_dispatch."

      - name: Build & push Docker image (staging)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: arjunrathod1996/scmproject-githubactions
          tags: staging
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Staging
        run: |
          echo "ðŸš€ Deploying to Staging environment..."
          kubectl apply -f k8s/deployment-staging.yaml
          kubectl apply -f k8s/service.yaml

  # ðŸš€ Stage 2: Deploy to Production (MASTER)
  production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build & push Docker image (prod)
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: arjunrathod1996/scmproject-githubactions
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to Production (master branch)..."
          kubectl apply -f k8s/deployment-prod.yaml
          kubectl apply -f k8s/service.yaml
